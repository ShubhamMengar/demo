#!/usr/bin/env python
from argparse import ArgumentParser, FileType
from configparser import ConfigParser


from confluent_kafka import Consumer
import websockets
from asyncio.events import get_event_loop
from asyncio.futures import Future
from functools import partial
import asyncio
import threading


def consume(clients):
    parser = ArgumentParser()
    parser.add_argument('config_file', type=FileType('r'))
    args = parser.parse_args()

    # Parse the configuration.
    config_parser = ConfigParser()
    config_parser.read_file(args.config_file)
    config = dict(config_parser['default'])
    config.update(config_parser['consumer'])

    # Create Consumer instance
    consumer = Consumer(config)

    # Subscribe to topic
    topic = "echo"
    consumer.subscribe([topic])

    # Poll for new messages from Kafka and print them.

    while True():
        msg = consumer.poll(0.2)
        if msg is None:
            print("Waitng...")
        elif msg.error():
            print("ERROR: %s".format(msg.error()))
        else:
            value = msg.value()
            print(f"Sending {value}")

            websockets.broadcast(clients, value)

    print("Closing Kafka Consumer")
    consumer.close()


async def handle_connection(clients, connection,path):
    clients.add(connection)
    await connection.wait_closed()
    await Future

async def main():

    clients = set()


    get_event_loop().run_in_executor(None, consume,
                                     clients)

    print("Starting WebSocket Server.")

    await websockets.serve(partial(handle_connection,clients),
                                    "localhost", 8075)
#await Future()
    #finally:
        #shutdown_flag.set_result(True)


asyncio.run(main())
